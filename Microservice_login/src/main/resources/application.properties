spring.application.name=User
# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres


# Hibernate Configuration pour la recreation des tables activez ses parametres
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Keycloak Configuration admin
keycloak.auth-server-url=http://srv-dpi-archidist-keycloak.univ-rouen.fr:8080
keycloak.realm=GROUPE05
keycloak.resource=spring-boot-client
keycloak.admin-username=admin
keycloak.admin-password=admin


# Spring Security OAuth2 Resource Server JWT Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://srv-dpi-archidist-keycloak.univ-rouen.fr:8080/realms/GROUPE05
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# Server Configuration
server.port=8081

# JWT Authentication Converter Configuration
jwt.auth.converter.resource-id=spring-boot-client
jwt.auth.converter.principle-attribute=preferred_username


# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# =============================================
# DEBUG
# =============================================
#logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework=TRACE
#logging.level.com=TRACE
#server.error.whitelabel.enabled=true
# =============================================